# cson converts to json but lets us write nicer snippets
# main issue with snippets is here https://github.com/Microsoft/vscode/issues/15140
# doco for cson is here https://github.com/bevry/cson

snippetname:
	prefix: 'snippet-name'
	body:  ['''	
	''']

azsp001a:
	prefix: 'azsp-fun-1c-getcustomer-customercs'
	description: 'description',
	body:  ['''			

public class Customer
{
   public string CustomerId { get; set; }
   public string CompanyName { get; set; }
   public string Address { get; set; }
   public string City { get; set; }
   public string ContactName { get; set; }
   public string ContactTitle { get; set; }
   public string Country { get; set; }
   public string Fax { get; set; }
   public string Phone { get; set; }
   public string PostalCode { get; set; }
   public string Region { get; set; }

   public static Func<dynamic, Customer> Project
   {
       get
       {
           return data =>
           {
               return new Customer
               {
                   CompanyName = data?.CompanyName,
                   Address = data?.Address,
                   City = data?.City,
                   ContactName = data?.ContactName,
                   ContactTitle = data?.ContactTitle,
                   Country = data?.Country,
                   Fax = data?.Fax,
                   Phone = data?.Phone,
                   PostalCode = data?.PostalCode,
                   Region = data?.Region
               };
           };
       }
   }
}

  
	''']
	

azsp001b:
	prefix: 'azsp-fun-1b-getcustomer-projectjson'
	description: 'description',
	body:  ['''			
{
    "frameworks": {
        "net46": {
            "dependencies": {
                "Dapper": "1.50.2",
                "System.Data.SqlClient": "4.1.0",
                "Microsoft.WindowsAzure.ConfigurationManager": "3.2.1"
            }
        }
    }
}
  
	''']
	

azsp001e:
	prefix: 'azsp-fun-1e-getcustomer-runcsx'
	body:['''
#load "../shared/model/customer.csx"

using System.Net;
using System.Configuration;
using System.Data.SqlClient;
using Dapper;

public static dynamic Run(HttpRequestMessage req, string id,
TraceWriter log)
{
    var connection = ConfigurationManager.ConnectionStrings["SqlConnection"].ConnectionString;
    log.Info("C# HTTP trigger function processed a request.");

    using (var db = new SqlConnection(connection))
    {
        if (string.IsNullOrEmpty(id))
        {
            List<Customer> customers = db.Query<Customer>("SELECT * FROM [dbo].[Customers]").ToList();
            return customers;
        }
        else
        {
            Customer customer = db.Query<Customer>("SELECT * FROM [dbo].[Customers] WHERE CustomerId = @Id", new { Id = id }).FirstOrDefault();
            return customer;
        }
    }
}

''']	



azsp002b:
	prefix: 'azsp-fun-2-syncCustomers-runcsx'
	body: ['''
#load "../shared/model/customer.csx"
using System.Net;
using Dapper;
using System.Data.SqlClient;
using System.Configuration;
using ServiceStack.Redis;
using ServiceStack.Text;
using System.Configuration;

public static void Run(TimerInfo myTimer, TraceWriter log)
{ 
    log.Info($"C# Timer trigger function executed at: {DateTime.Now}");
    var cnnString  = ConfigurationManager.ConnectionStrings["SqlConnection"].ConnectionString;
    var redisString  = ConfigurationManager.ConnectionStrings["MyRedis"].ConnectionString;

    var redisManager = new RedisManagerPool(redisString);
    var redis = redisManager.GetClient();
    var redisCustomer = redis.As<Customer>();

    using(var db = new SqlConnection(cnnString))
    {
       var list = db.Query<Customer>("select * from [dbo].[Customers]").ToList();
       // foreach (var item in list)
       // {
       //     redisCustomer.Store(item);
       // }
       redisCustomer.StoreAll(list);
    }
}

''']


# #########################
#      DEMO #3 - USE A SERVICE BUS FOR UPDATES
# #########################

azsp003updateruncsx:
	prefix: 'azsp-fun-3-updateCustomer-runcsx'
	body:  ['''	
#load "../shared/model/customer.csx"
using System.Net;

public static async Task<Customer> Run(HttpRequestMessage req, TraceWriter log, 
    IAsyncCollector<Customer> topicQueue)
{    
    Customer data = await req.Content.ReadAsAsync<Customer>();
    log.Info($"updateCustomer. Customer: {data.Id}");
    topicQueue.AddAsync(data);
    return data;
}    
	''']


azsp003persistcustomerruncsx:
	prefix: 'azsp-fun-3-updateCustomer-runcsx'
	body:  ['''	
#load "../shared/model/customer.csx"

using System.Net;
using Dapper;
using System.Data.SqlClient;
using System.Configuration;

public static void Run(Customer customer, TraceWriter log)
{
    var cnnString  = ConfigurationManager.ConnectionStrings["SqlConnection"].ConnectionString;
    using(var db = new SqlConnection(cnnString))
    {
        string command = "";
        command = @"UPDATE [dbo].[Customers] SET CompanyName = @CompanyName WHERE CustomerId = @Id";

        var result = db.Execute(command,customer);
        log.Info($"persistCustomer: updated {customer.CompanyName}");
    }
}
	''']
    
azsp003cachecustomerruncsx:
	prefix: 'azsp-fun-3-cacheCustomer-runcsx'
	body:  ['''	
#load "../shared/model/customer.csx"

using System;
using System.Configuration;
using System.Threading.Tasks;
using ServiceStack.Redis;
using ServiceStack.Text;

public static void Run(Customer customer, TraceWriter log)
{
    log.Info($"cacheCustomer customer:{customer}");
    var redisString  = ConfigurationManager.ConnectionStrings["MyRedis"].ConnectionString;
    var redisManager = new RedisManagerPool(redisString);
    var redis = redisManager.GetClient();
    var redisCustomer = redis.As<Customer>();
    redisCustomer.Store(customer);
}    
	''']    